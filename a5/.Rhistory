data <- read.csv(file="got_character_train.csv", header=TRUE, sep=",")
mydata<- as.data.frame(data)
# a)The training dataset  contains  a  large  number  of  missing  values. We  will  use  book mentions, gender,
# if the character has dead relations, number of dead relations, nobility, popularity, marital status, age and information
# about alive spouse, mother, fatherand heir  for  the  prediction.Impute  the  missing  value  of  age
# by  its  median  and  fill  in  the remaining missing values with -1
names(mydata)
age_median<-median(mydata$age,na.rm=TRUE)
age_median
rows<-nrow(mydata)
sapply(mydata, function(x) sum(is.na(x)))
for(col in names(mydata)){
if(col=="age"){
for(i in 1:rows){
if(is.na(mydata[col][i,])){
#print(typeof(mydata[col][i,]))
mydata[col][i,]<-age_median
}
}
}
else{
# print(col)
for(i in 1:rows){
if(is.na(mydata[col][i,])){
mydata[col][i,]<- -1
}
}
}
}
sapply(mydata, function(x) sum(is.na(x)))
#-------------------------------------------------------------------------------------------------------
# b)Sample  class  imbalance  is  sometimes  an  issue  with  logistic  regression.  Clearly,  the training dataset
# has a majorimbalance, as the number of characters alive is greater than the  number  of  characters  dead.
# Represent  this  imbalance  with  a  help  of  a  pi-  chart. Correct this imbalance by upsampling
# the records of ‘dead’ characters in the training dataset.Represent the division of records in upsampled data
# also with a pi-  chart.
table(mydata$isAlive)
total_alive<-sum(mydata$isAlive==1)
total_dead<-sum(mydata$isAlive==0)
x<-data.frame("alive",total_alive)
names(x)<-c("A","val")
y<-data.frame("dead",total_dead)
names(y)<-c("A","val")
x<-rbind(x,y)
x
library(plotly)
p <- plot_ly(x, labels = ~A, values = ~val, type = 'pie') %>%
layout(title = 'Imbalance in alive and dead characters',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
fd<-factor(mydata$isAlive)
library(caret)
new_data<-upSample(mydata,fd)
table(new_data$isAlive)
total_alive<-sum(new_data$isAlive==1)
total_dead<-sum(new_data$isAlive==0)
x2<-data.frame("alive",total_alive)
names(x2)<-c("A","val")
y2<-data.frame("dead",total_dead)
names(y2)<-c("A","val")
x2<-rbind(x2,y2)
x2
p2 <- plot_ly(x2, labels = ~A, values = ~val, type = 'pie') %>%
layout(title = 'After upsampling :Imbalance in alive and dead characters',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p2
#------------------------------------------------------------------------------------------------------------------
# d)Implement logistic regression model on the training data. The summary statistics of the model
# will  clearly  indicate  the  significance  of  each  component.  Extract  only  the
# significant components from the dataset
nrow(new_data)
train <- new_data[1:1500,]
nrow(train)
test <- new_data[1501:2002,]
nrow(test)
test<-test["isAlive"]
nrow(test)
setwd("~/dev/third_year/sem_5/data_analytics/assignments/a5")
data <- read.csv(file="got_character_train.csv", header=TRUE, sep=",")
mydata<- as.data.frame(data)
names(mydata)
age_median<-median(mydata$age,na.rm=TRUE)
age_median
rows<-nrow(mydata)
sapply(mydata, function(x) sum(is.na(x)))
for(col in names(mydata)){
if(col=="age"){
for(i in 1:rows){
if(is.na(mydata[col][i,])){
#print(typeof(mydata[col][i,]))
mydata[col][i,]<-age_median
}
}
}
else{
# print(col)
for(i in 1:rows){
if(is.na(mydata[col][i,])){
mydata[col][i,]<- -1
}
}
}
}
sapply(mydata, function(x) sum(is.na(x)))
table(mydata$isAlive)
total_alive<-sum(mydata$isAlive==1)
total_dead<-sum(mydata$isAlive==0)
x<-data.frame("alive",total_alive)
names(x)<-c("A","val")
y<-data.frame("dead",total_dead)
names(y)<-c("A","val")
x<-rbind(x,y)
x
library(plotly)
p <- plot_ly(x, labels = ~A, values = ~val, type = 'pie') %>%
layout(title = 'Imbalance in alive and dead characters',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
fd<-factor(mydata$isAlive)
library(caret)
new_data<-upSample(mydata,fd)
table(new_data$isAlive)
total_alive<-sum(new_data$isAlive==1)
total_dead<-sum(new_data$isAlive==0)
x2<-data.frame("alive",total_alive)
names(x2)<-c("A","val")
y2<-data.frame("dead",total_dead)
names(y2)<-c("A","val")
x2<-rbind(x2,y2)
x2
p2 <- plot_ly(x2, labels = ~A, values = ~val, type = 'pie') %>%
layout(title = 'After upsampling :Imbalance in alive and dead characters',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p2
nrow(new_data)
train <- new_data[1:1500,]
nrow(train)
test <- new_data[1501:2002,]
nrow(test)
test<-test["isAlive"]
nrow(test)
model <- glm(isAlive ~ book1+book2+book3+book4+book5+
male+boolDeadRelations+numDeadRelations+
isNoble+popularity+isMarried+age+
isAliveSpouse+isAliveMother+isAliveFather+
isAliveHeir,family=binomial(link='logit'),data=train)
summary(model)
model2<- glm(isAlive ~ book1+book2+book4+male+boolDeadRelations,family=binomial(link='logit'),data=train)
summary(model2)
model2<- glm(isAlive ~ book1+book2+book4+male+boolDeadRelations,family=binomial(link='logit'),data=train)
summary(model2)
data <- read.csv(file="got_character_train.csv", header=TRUE, sep=",")
mydata<- as.data.frame(data)
names(mydata)
age_median<-median(mydata$age,na.rm=TRUE)
age_median
rows<-nrow(mydata)
sapply(mydata, function(x) sum(is.na(x)))
for(col in names(mydata)){
if(col=="age"){
for(i in 1:rows){
if(is.na(mydata[col][i,])){
#print(typeof(mydata[col][i,]))
mydata[col][i,]<-age_median
}
}
}
else{
# print(col)
for(i in 1:rows){
if(is.na(mydata[col][i,])){
mydata[col][i,]<- -1
}
}
}
}
sapply(mydata, function(x) sum(is.na(x)))
table(mydata$isAlive)
total_alive<-sum(mydata$isAlive==1)
total_dead<-sum(mydata$isAlive==0)
x<-data.frame("alive",total_alive)
names(x)<-c("A","val")
y<-data.frame("dead",total_dead)
names(y)<-c("A","val")
x<-rbind(x,y)
x
library(plotly)
p <- plot_ly(x, labels = ~A, values = ~val, type = 'pie') %>%
layout(title = 'Imbalance in alive and dead characters',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
fd<-factor(mydata$isAlive)
library(caret)
new_data<-upSample(mydata,fd)
table(new_data$isAlive)
total_alive<-sum(new_data$isAlive==1)
total_dead<-sum(new_data$isAlive==0)
x2<-data.frame("alive",total_alive)
names(x2)<-c("A","val")
y2<-data.frame("dead",total_dead)
names(y2)<-c("A","val")
x2<-rbind(x2,y2)
x2
p2 <- plot_ly(x2, labels = ~A, values = ~val, type = 'pie') %>%
layout(title = 'After upsampling :Imbalance in alive and dead characters',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p2
nrow(new_data)
train <- new_data[1:1500,]
nrow(train)
test <- new_data[1501:2002,]
nrow(test)
test<-test["isAlive"]
nrow(test)
model <- glm(isAlive ~ book1+book2+book3+book4+book5+
male+boolDeadRelations+numDeadRelations+
isNoble+popularity+isMarried+age+
isAliveSpouse+isAliveMother+isAliveFather+
isAliveHeir,family=binomial(link='logit'),data=train)
summary(model)
model2<- glm(isAlive ~ book1+book2+book4+male+boolDeadRelations,family=binomial(link='logit'),data=train)
summary(model2)
model <- glm(isAlive ~ book1+book2+book3+book4+book5+
male+boolDeadRelations+numDeadRelations+
isNoble+popularity+isMarried+age+
isAliveSpouse+isAliveMother+isAliveFather+
isAliveHeir,family=binomial(link='logit'),data=train)
summary(model)
summary(model)
model2<- glm(isAlive ~ book1+book2+book4+male+boolDeadRelations,family=binomial(link='logit'),data=train)
summary(model2)
data_2 <- read.csv(file="got_character_test.csv", header=TRUE, sep=",")
training_data<- as.data.frame(data_2)
data_2 <- read.csv(file="got_character_test.csv", header=TRUE, sep=",")
test_data<- as.data.frame(data_2)
test_col=test_data["isAlive"]
model <- glm(isAlive ~ book1+book2+book3+book4+book5+
male+boolDeadRelations+numDeadRelations+
isNoble+popularity+isMarried+age+
isAliveSpouse+isAliveMother+isAliveFather+
isAliveHeir,family=binomial(link='logit'),data=train)
summary(model)
model2<- glm(isAlive ~ book1+book2+book4+male+boolDeadRelations,family=binomial(link='logit'),data=train)
summary(model2)
data_2 <- read.csv(file="got_character_test.csv", header=TRUE, sep=",")
test_data<- as.data.frame(data_2)
test_col=test_data["isAlive"]
p1<-predict(model,newdata=subset(test_col,type='response'))
fitted <- ifelse(fitted > 0.5,1,0)
misClasificError <- mean(fitted != test_col$isAlive)
print(paste('Accuracy',1-misClasificError))
p1<-predict(model,newdata=subset(test_col,type='response'))
p1<-predict(model,newdata=subset(test_data,type='response'))
fitted <- ifelse(fitted > 0.5,1,0)
misClasificError <- mean(fitted != test_col$isAlive)
print(paste('Accuracy',1-misClasificError))
p1<-predict(model,newdata=subset(test_data,type='response'))
p1<-predict(model,newdata=subset(t,type='response'))
fitted <- ifelse(fitted > 0.5,1,0)
p1<-predict(model,newdata=subset(t,type='response'))
predict <- predict(model, type = 'response')
predict <- predict(model, type = 'response')
table(train$isAlive, predict > 0.5)
table(test_data$isAlive, predict > 0.5)
predict <- predict(model, type = 'response')
nrow(test_data)
head(test_data)
for(col in names(test_data)){
for(i in 1:rows){
if(is.na(mydata[col][i,])){
test_data[col][i,]<- -1
}
}
}
nrow(test_data)
head(test_data)
data <- read.csv(file="got_character_train.csv", header=TRUE, sep=",")
mydata<- as.data.frame(data)
# a)The training dataset  contains  a  large  number  of  missing  values. We  will  use  book mentions, gender,
# if the character has dead relations, number of dead relations, nobility, popularity, marital status, age and information
# about alive spouse, mother, fatherand heir  for  the  prediction.Impute  the  missing  value  of  age
# by  its  median  and  fill  in  the remaining missing values with -1
names(mydata)
age_median<-median(mydata$age,na.rm=TRUE)
age_median
rows<-nrow(mydata)
sapply(mydata, function(x) sum(is.na(x)))
for(col in names(mydata)){
if(col=="age"){
for(i in 1:rows){
if(is.na(mydata[col][i,])){
#print(typeof(mydata[col][i,]))
mydata[col][i,]<-age_median
}
}
}
else{
# print(col)
for(i in 1:rows){
if(is.na(mydata[col][i,])){
mydata[col][i,]<- -1
}
}
}
}
sapply(mydata, function(x) sum(is.na(x)))
#-------------------------------------------------------------------------------------------------------
# b)Sample  class  imbalance  is  sometimes  an  issue  with  logistic  regression.  Clearly,  the training dataset
# has a majorimbalance, as the number of characters alive is greater than the  number  of  characters  dead.
# Represent  this  imbalance  with  a  help  of  a  pi-  chart. Correct this imbalance by upsampling
# the records of ‘dead’ characters in the training dataset.Represent the division of records in upsampled data
# also with a pi-  chart.
table(mydata$isAlive)
total_alive<-sum(mydata$isAlive==1)
total_dead<-sum(mydata$isAlive==0)
x<-data.frame("alive",total_alive)
names(x)<-c("A","val")
y<-data.frame("dead",total_dead)
names(y)<-c("A","val")
x<-rbind(x,y)
x
library(plotly)
p <- plot_ly(x, labels = ~A, values = ~val, type = 'pie') %>%
layout(title = 'Imbalance in alive and dead characters',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
fd<-factor(mydata$isAlive)
library(caret)
new_data<-upSample(mydata,fd)
table(new_data$isAlive)
total_alive<-sum(new_data$isAlive==1)
total_dead<-sum(new_data$isAlive==0)
x2<-data.frame("alive",total_alive)
names(x2)<-c("A","val")
y2<-data.frame("dead",total_dead)
names(y2)<-c("A","val")
x2<-rbind(x2,y2)
x2
p2 <- plot_ly(x2, labels = ~A, values = ~val, type = 'pie') %>%
layout(title = 'After upsampling :Imbalance in alive and dead characters',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p2
#------------------------------------------------------------------------------------------------------------------
# d)Implement logistic regression model on the training data. The summary statistics of the model
# will  clearly  indicate  the  significance  of  each  component.  Extract  only  the
# significant components from the dataset
nrow(new_data)
train <- new_data[1:1500,]
nrow(train)
test <- new_data[1501:2002,]
nrow(test)
test<-test["isAlive"]
nrow(test)
model <- glm(isAlive ~ book1+book2+book3+book4+book5+
male+boolDeadRelations+numDeadRelations+
isNoble+popularity+isMarried+age+
isAliveSpouse+isAliveMother+isAliveFather+
isAliveHeir,family=binomial(link='logit'),data=train)
summary(model)
#AIC: 1451.8
model2<- glm(isAlive ~ book1+book2+book4+male+boolDeadRelations,family=binomial(link='logit'),data=train)
summary(model2)
data_2 <- read.csv(file="got_character_test.csv", header=TRUE, sep=",")
test_data<- as.data.frame(data_2)
for(col in names(test_data)){
for(i in 1:rows){
if(is.na(mydata[col][i,])){
test_data[col][i,]<- -1
}
}
}
nrow(test_data)
head(test_data)
test_col=test_data["isAlive"]
predict <- predict(model, type = 'response')
table(train$isAlive, predict > 0.5)
table(test_data$isAlive, predict > 0.5)
typeof(test_col)
p1<-predict(model,test_data,type='response')
library(InformationValue)
install.packages("InformationValue")
library(InformationValue)
optCutOff <- optimalCutoff(test_data$isAlive, predicted)[1]
optCutOff <- optimalCutoff(test_data$isAlive, p1)[1]
head(test_data$isAlive)
test_data<- as.data.frame(data_2)
for(col in names(test_data)){
for(i in 1:rows){
if(is.na(test_data[col][i,])){
test_data[col][i,]<- -1
}
}
}
nrow(test_data)
head(test_data)
p1<-predict(model,test_data,type='response')
library(InformationValue)
optCutOff <- optimalCutoff(test_data$isAlive, p1)[1]
misClassError(testData$ABOVE50K, predicted, threshold = optCutOff)
optCutOff
misClassError(testData$ABOVE50K, p1, threshold = optCutOff)
misClassError(test_data$isAlive, p1, threshold = optCutOff)
plotROC(test_data$isAlive, p1)
confusionMatrix(test_data$isAlive, p1, threshold = optCutOff)
p2<-predict(model2,test_data,type='response')
optCutOff2 <- optimalCutoff(test_data$isAlive, p2)[1]
optCutOff2
misClassError(test_data$isAlive, p2, threshold = optCutOff2)
confusionMatrix(test_data$isAlive, p2, threshold = optCutOff2)
plotROC(test_data$isAlive, p2)
plotROC(test_data$isAlive, p1)
p2<-predict(model2,test_data,type='response')
optCutOff2 <- optimalCutoff(test_data$isAlive, p2)[1]
optCutOff2
misClassError(test_data$isAlive, p2, threshold = optCutOff2)
confusionMatrix(test_data$isAlive, p2, threshold = optCutOff2)
plotROC(test_data$isAlive, p2)
model <- glm(isAlive ~ book1+book2+book3+book4+book5+
male+boolDeadRelations+numDeadRelations+
isNoble+popularity+isMarried+age+
isAliveSpouse+isAliveMother+isAliveFather+
isAliveHeir,family=binomial(link='logit'),data=train)
summary(model)
model2<- glm(isAlive ~ book1+book2+book4+male+boolDeadRelations
+numDeadRelations+popularity,family=binomial(link='logit'),data=train)
summary(model2)
data_2 <- read.csv(file="got_character_test.csv", header=TRUE, sep=",")
test_data<- as.data.frame(data_2)
for(col in names(test_data)){
for(i in 1:rows){
if(is.na(test_data[col][i,])){
test_data[col][i,]<- -1
}
}
}
nrow(test_data)
head(test_data)
p1<-predict(model,test_data,type='response')
library(InformationValue)
optCutOff <- optimalCutoff(test_data$isAlive, p1)[1]
optCutOff
misClassError(test_data$isAlive, p1, threshold = optCutOff)
confusionMatrix(test_data$isAlive, p1, threshold = optCutOff)
plotROC(test_data$isAlive, p1)
p2<-predict(model2,test_data,type='response')
optCutOff2 <- optimalCutoff(test_data$isAlive, p2)[1]
optCutOff2
misClassError(test_data$isAlive, p2, threshold = optCutOff2)
misClassError(test_data$isAlive, p2, threshold = optCutOff2)#0.269
confusionMatrix(test_data$isAlive, p2, threshold = optCutOff2)
plotROC(test_data$isAlive, p2)
